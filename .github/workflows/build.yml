name: Build

on:
  workflow_call:
    inputs:
      ref:
        type: string
        default: ${{ github.ref }}
      release:
        description: if this is a release build
        type: boolean
        default: false

jobs:
  build:
    name: ${{ matrix.id }} (${{ matrix.target }}) (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        id:
          - linux-arm64
          - linux-arm64-musl
          - linux-x64
          - linux-x64-musl
          - macos-arm64
          - macos-x64
          - windows-x64

        include:
          # When adding a new target, define a new id above

          #
          # Linux
          #

          - id: linux-arm64
            target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            platform: linux/arm64/v8
            architecture: "AArch64"

          - id: linux-arm64-musl
            target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            platform: linux/arm64/v8
            architecture: "AArch64"

          - id: linux-x64
            target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            platform: linux/amd64
            architecture: "Advanced Micro Devices X86-64"

          - id: linux-x64-musl
            target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            platform: linux/amd64
            architecture: "Advanced Micro Devices X86-64"

          #
          # MacOS
          #

          - id: macos-arm64
            target: aarch64-apple-darwin
            os: macos-15
            architecture: "arm64"

          - id: macos-x64
            target: x86_64-apple-darwin
            os: macos-13
            architecture: "x86_64"

          #
          # Windows
          #

          - id: windows-x64
            target: x86_64-pc-windows-msvc
            os: windows-latest
            architecture: "x86-64"

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout source
        # Pin to commit SHA for security
        # actions/checkout v4.1.7
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
        with:
          ref: ${{ inputs.ref }}

      - name: Setup environment
        run: |
          version=$(echo "${{ github.ref_name }}" | grep '^[0-9]*.[0-9]*.[0-9]*$') || true

          if [ -z "$version" ]; then
            # Set default version for non-release builds
            version="17.6.0"
          fi

          root_directory="$(pwd)"
          archive="postgresql-$version-${{ matrix.target }}"
          install_directory="$root_directory/$archive"

          echo "ARCHIVE=$archive" | tee -a $GITHUB_ENV
          echo "INSTALL_DIRECTORY=$install_directory" | tee -a $GITHUB_ENV
          echo "ROOT_DIRECTORY=$root_directory" | tee -a $GITHUB_ENV
          echo "VERSION=$version" | tee -a $GITHUB_ENV

      #
      # Linux Build
      #

      - name: Set up QEMU
        if: ${{ matrix.os == 'ubuntu-latest' }}
        # Pin to commit SHA for security
        # docker/setup-qemu-action v3.0.0
        uses: docker/setup-qemu-action@68827325e0b33c7199eb31dd4e31fbe9023e06e3
        with:
          # Pin to specific version and digest for security
          # tonistiigi/binfmt:qemu-v10.0.4-56 as of 2025-10-21
          image: tonistiigi/binfmt:qemu-v10.0.4-56@sha256:30cc9a4d03765acac9be2ed0afc23af1ad018aed2c28ea4be8c2eb9afe03fbd1
          platforms: arm64,amd64

      - name: Configure build (Linux)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          if [[ "${{ matrix.id }}" = *musl* ]]; then
            echo "DOCKERFILE=dockerfiles/Dockerfile.linux-musl" | tee -a $GITHUB_ENV
          else
            echo "DOCKERFILE=dockerfiles/Dockerfile.linux-gnu" | tee -a $GITHUB_ENV
          fi

          echo "PLATFORM=${{ matrix.platform }}" | tee -a $GITHUB_ENV

      - name: Build (Linux)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          cp $DOCKERFILE Dockerfile
          docker buildx build --build-arg "POSTGRESQL_VERSION=$VERSION" --platform "$PLATFORM" --tag postgresql-build:latest .

          docker create --platform "$PLATFORM" --name pgbuild postgresql-build:latest
          docker cp pgbuild:/opt/postgresql $INSTALL_DIRECTORY
          docker cp pgbuild:/usr/src/postgresql/COPYRIGHT "$INSTALL_DIRECTORY/" || echo "COPYRIGHT not found in expected location"
          docker rm -f pgbuild

      #
      # MacOS Build
      #

      - name: Checkout postgresql source code (MacOS)
        if: ${{ startsWith(matrix.id, 'macos-') }}
        run: |
          source_directory="$ROOT_DIRECTORY/postgresql-src"
          branch=$(echo "$VERSION" | awk -F. '{print "REL_"$1"_"$2}')
          tag=$(echo "$VERSION" | awk -F. '{print "REL_"$1"_"$2}')

          # Clone and checkout PostgreSQL source
          git clone --depth 1 --branch $branch https://git.postgresql.org/git/postgresql.git "$source_directory"
          cd "$source_directory"
          git fetch --depth=1 origin "refs/tags/$tag:refs/tags/$tag"
          git checkout "$tag"

          echo "SOURCE_DIRECTORY=$source_directory" | tee -a $GITHUB_ENV

      - name: Configure build (MacOS)
        if: ${{ startsWith(matrix.id, 'macos-') }}
        run: |
          packages="fop gettext icu4c lld llvm lz4 openssl readline xz zstd"
          for package in $packages; do
            if brew list $package &>/dev/null; then
              echo "$package is already installed, skipping"
            else
              echo "Installing $package..."
              brew install $package
            fi
          done

          brew_dir="/usr/local"
          if [ "${{ matrix.id }}" == "macos-arm64" ]; then
            brew_dir="/opt/homebrew"
          fi
          brew_opt_dir="$brew_dir/opt"
          ls -l "$brew_opt_dir"

          echo "CPPFLAGS=-I${brew_opt_dir}/icu4c/include -I${brew_opt_dir}/openssl/include" | tee -a $GITHUB_ENV
          echo "LDFLAGS=-L${brew_opt_dir}/icu4c/lib -L${brew_opt_dir}/openssl/lib" | tee -a $GITHUB_ENV
          echo "LLVM_CONFIG=${brew_opt_dir}/llvm/bin/llvm-config" | tee -a $GITHUB_ENV
          echo "PKG_CONFIG_PATH=${brew_opt_dir}/icu4c/lib/pkgconfig:${brew_opt_dir}/openssl/lib/pkgconfig" | tee -a $GITHUB_ENV

      - name: Build (MacOS)
        if: ${{ startsWith(matrix.id, 'macos-') }}
        run: |
          cd "$SOURCE_DIRECTORY"
          major_version=$(echo "$VERSION" | awk -F. '{print $1}')

          echo "=========================================="
          echo "Building PostgreSQL version: $VERSION"
          echo "Major version: $major_version"
          echo "=========================================="

          ./configure \
            --prefix "$INSTALL_DIRECTORY" \
            --enable-integer-datetimes \
            --enable-option-checking=fatal \
            $([ $major_version -le 16 ] && echo "--enable-thread-safety") \
            $([ $major_version -ge 14 ] && echo "--with-icu" || echo "--without-icu") \
            --without-ldap \
            --with-libxml \
            --with-libxslt \
            $([ $major_version -ge 14 ] && echo "--with-lz4") \
            --with-openssl \
            --with-pgport=5432 \
            $([ $major_version -ge 15 ] && echo "--with-python") \
            --with-readline \
            --with-system-tzdata=/usr/share/zoneinfo \
            --with-uuid=e2fs \
            $([ $major_version -ge 16 ] && echo "--with-zstd")
          make $([ $major_version -ge 15 ] && echo "world-bin")
          make $([ $major_version -ge 15 ] && echo "install-world-bin" || echo "install")
          make -C contrib install

          cp "$SOURCE_DIRECTORY/COPYRIGHT" "$INSTALL_DIRECTORY"
          cd "$ROOT_DIRECTORY"

      # This allows the MacOS build to be relocated to a different directory
      - name: Update library paths (MacOS)
        if: ${{ startsWith(matrix.id, 'macos-') }}
        run: |
          find $INSTALL_DIRECTORY/bin -type f | xargs -L 1 install_name_tool -change $INSTALL_DIRECTORY/lib/libpq.5.dylib '@executable_path/../lib/libpq.5.dylib'

      #
      # Windows
      #

      - name: Download binaries (Windows)
        if: ${{ startsWith(matrix.id, 'windows-') }}
        run: |
          # NOTE: EnterpriseDB does not publish checksums for Windows binaries.
          # This is a known security limitation. Future improvement: build from source.
          # See: https://stackoverflow.com/questions/73770093/how-to-fetch-postgresql-binaries-with-checksums-for-windows
          postgresql_version=$(echo "$VERSION" | awk -F. '{print $1"."$2}')
          curl https://get.enterprisedb.com/postgresql/postgresql-${postgresql_version}-1-windows-x64-binaries.zip > postgresql.zip

      - name: Extract binaries (Windows)
        if: ${{ startsWith(matrix.id, 'windows-') }}
        run: |
          unzip postgresql.zip
          # Copy COPYRIGHT file before removing doc directory
          find pgsql -name "COPYRIGHT*" -o -name "LICEN[CS]E*" | head -1 | xargs -I {} cp {} COPYRIGHT 2>/dev/null || echo "No license file found"
          rm -rf pgsql/doc pgsql/pgAdmin*
          mv pgsql "$INSTALL_DIRECTORY"
          [ -f COPYRIGHT ] && mv COPYRIGHT "$INSTALL_DIRECTORY/" || echo "No COPYRIGHT file to move"

      #
      # Package
      #

      - name: Prepare archive
        run: |
          cp $ROOT_DIRECTORY/README.md "$INSTALL_DIRECTORY"
          ls -l "$INSTALL_DIRECTORY/"

      # The .tar.gz archive is the primary archive for all platforms.  This archive
      # provides a consistent experience for programmatic cases (e.g. embedded).
      - name: Build archive (Linux, MacOS)
        if: ${{ !startsWith(matrix.id, 'windows-') }}
        run: |
          tar czf "$ARCHIVE.tar.gz" "$ARCHIVE"
          shasum -a 256 "$ARCHIVE.tar.gz" > "$ARCHIVE.tar.gz.sha256"
          echo "ASSET=$ARCHIVE.tar.gz" | tee -a $GITHUB_ENV
          echo "ASSET_SUM=$ARCHIVE.tar.gz.sha256" | tee -a $GITHUB_ENV

      - name: Attest build provenance (Linux, MacOS)
        if: ${{ inputs.release == true && !startsWith(matrix.id, 'windows-') }}
        # Pin to commit SHA for security
        # actions/attest-build-provenance v1.3.0
        uses: actions/attest-build-provenance@5e9cb68e95676991667494a6a4e59b8a2f13e1d0
        with:
          subject-path: '${{ env.ARCHIVE }}.tar.gz'

      - name: Build archive (Windows)
        if: ${{ startsWith(matrix.id, 'windows-') }}
        run: |
          tar czf "$ARCHIVE.tar.gz" "$ARCHIVE"
          certutil -hashfile "$ARCHIVE.tar.gz" SHA256 > "$ARCHIVE.tar.gz.sha256"
          echo "ASSET=$ARCHIVE.tar.gz" | tee -a $GITHUB_ENV
          echo "ASSET_SUM=$ARCHIVE.tar.gz.sha256" | tee -a $GITHUB_ENV

      - name: Attest build provenance - tar.gz (Windows)
        if: ${{ inputs.release == true && startsWith(matrix.id, 'windows-') }}
        # Pin to commit SHA for security
        # actions/attest-build-provenance v1.3.0
        uses: actions/attest-build-provenance@5e9cb68e95676991667494a6a4e59b8a2f13e1d0
        with:
          subject-path: '${{ env.ARCHIVE }}.tar.gz'

      # The zip archive for Windows is created as a convenience to users for manual installations.
      - name: Build .zip archive (Windows)
        if: ${{ startsWith(matrix.id, 'windows-') }}
        run: |
          7z a "$ARCHIVE.zip" "$ARCHIVE"
          certutil -hashfile "$ARCHIVE.zip" SHA256 > "$ARCHIVE.zip.sha256"
          echo "WINDOWS_ASSET=$ARCHIVE.zip" >> $GITHUB_ENV
          echo "WINDOWS_ASSET_SUM=$ARCHIVE.zip.sha256" >> $GITHUB_ENV

      - name: Attest build provenance - zip (Windows)
        if: ${{ inputs.release == true && startsWith(matrix.id, 'windows-') }}
        # Pin to commit SHA for security
        # actions/attest-build-provenance v1.3.0
        uses: actions/attest-build-provenance@5e9cb68e95676991667494a6a4e59b8a2f13e1d0
        with:
          subject-path: '${{ env.ARCHIVE }}.zip'

      #
      # Test
      #

      - name: Test the binary file cpu architecture
        run: |
          postgres_file="$INSTALL_DIRECTORY/bin/postgres"

          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            cpu_architecture=$(readelf --file-header "$postgres_file" | grep 'Machine:')
          else
            cpu_architecture=$(file "$postgres_file")
          fi

          echo "CPU_ARCHITECTURE=$cpu_architecture" | tee -a $GITHUB_ENV

          if [[ "$cpu_architecture" != *"${{ matrix.architecture }}"* ]]; then
            echo "ERROR: CPU architecture ($cpu_architecture) does not match expected architecture (${{ matrix.architecture }})"
            exit 1
          fi

      - name: Test build / archive
        run: |
          test_directory=$(mktemp -d)
          tar xzf "$ARCHIVE.tar.gz" -C "$test_directory"
          cd "$test_directory/$ARCHIVE"
          cp "$ROOT_DIRECTORY/scripts/test.sh" .

          if [[ "${{ matrix.id }}" = macos* ]]; then
            echo "Testing MacOS"
            ./test.sh $VERSION
          elif [[ "${{ matrix.id }}" = windows* ]]; then
            echo "Testing Windows"
            ./test.sh $VERSION
          elif [[ "${{ matrix.id }}" = *musl* ]]; then
            echo "Testing Linux MUSL"
            docker run \
              --platform "$PLATFORM" \
              --tty \
              --volume $(pwd):/opt/test \
              postgresql-build:latest \
              /bin/sh -c "cd /opt/test && ls -l && ./test.sh $VERSION"
          else
            echo "Testing Linux GNU"
            docker run \
              --platform "$PLATFORM" \
              --tty \
              --volume $(pwd):/opt/test \
              postgresql-build:latest \
              /bin/sh -c "cd /opt/test && ls -l && ./test.sh $VERSION"
          fi

      #
      # Release
      #

      - name: Upload release archive
        if: ${{ inputs.release == true }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "$VERSION" ${{ env.ASSET }} ${{ env.ASSET_SUM }}

      - name: Upload release archive (Windows)
        if: ${{ inputs.release == true && startsWith(matrix.id, 'windows-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "$VERSION" ${{ env.WINDOWS_ASSET }} ${{ env.WINDOWS_ASSET_SUM }}
